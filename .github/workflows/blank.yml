# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_publish_sonobuoy_image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sonobuoy code
        uses: actions/checkout@v4
        with:
          fetch-depth: 5
          repository: vmware-tanzu/sonobuoy
          ref: main
      - name: Build binaries and images
        run: |
          source ./scripts/build.sh
          build_binaries
          linux_containers
          build_test_image
      - name: Save images to tar
        run: |
          source ./scripts/build.sh
          save_images_to_tar
      - name: Save artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sonobuoy-build-linux-${{ github.run_id }}
          path: |
            build

  publish_sonobuoy_image_manifest:
    runs-on: ubuntu-latest
    needs: [build_publish_sonobuoy_image]
    steps:
      - name: Checkout sonobuoy code
        uses: actions/checkout@v4
        with:
          fetch-depth: 5
          repository: vmware-tanzu/sonobuoy
          ref: main
      - name: Download binaries and prebuilt images
        uses: actions/download-artifact@v3
        with:
          name: sonobuoy-build-linux-${{ github.run_id }}
          path: build
      - name: Load images and verify
        run: |
          docker load -i build/linux/amd64/sonobuoy-img-linux-amd64-${{ github.run_id }}.tar
          docker load -i build/linux/arm64/sonobuoy-img-linux-arm64-${{ github.run_id }}.tar
          docker load -i build/linux/ppc64le/sonobuoy-img-linux-ppc64le-${{ github.run_id }}.tar
          docker load -i build/linux/s390x/sonobuoy-img-linux-s390x-${{ github.run_id }}.tar
          docker image ls
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USER }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#      - name: Push images
#        env:
#          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
#          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
#        run: |
#          source ./scripts/build.sh
#          gen_manifest_and_push_all
